remotes::install_github("ubc-stat/stat-406-rpackage")
Stat406::test_latex_installation()
setwd("C:/projects/Qualifying papers/QP-4/code")
# seroreversion rate
reversion = 32/109
revresion_test = prop.test(32, 109, correct = FALSE)
reversion_ci = c(revresion_test$conf.int[1], revresion_test$conf.int[2]) # 0.2162870 0.3849234
# sensitivity and specificity
se_ci = c(0.837, 0.921)
se = 0.879
sp_ci = c(0.961, 1)
sp = 0.9975
#################
# Montreal-Laval
#################
# 95 est and CI
ml = prop.test(215, 1578, correct = FALSE)
ml$estimate # 0.1362484
c(ml$conf.int[1], ml$conf.int[2]) # 0.1202033 0.1540603
# correct for seroreversion
p1_ml = 90/3061
p1_ml_test = prop.test(90, 3061, correct = FALSE)
p1_ml_ci = c(p1_ml_test$conf.int[1], p1_ml_test$conf.int[2])
ml$estimate + p1_ml * reversion # 0.1448802
c(ml$conf.int[1] + p1_ml_ci[1] * reversion_ci[1], ml$conf.int[2] + p1_ml_ci[2] * reversion_ci[2]) # 0.1253903 0.1679182
# correct for both seroreversion and test-kit performance
p1_ml_cci = c((p1_ml_ci[1] + sp_ci[1] - 1)/(se_ci[2] - 1 + sp_ci[1]), (p1_ml_ci[2] + sp_ci[2] - 1)/(se_ci[1] - 1 + sp_ci[2]))
(ml$estimate - 1 + sp) / (se - 1 + sp) + reversion * p1_ml # 0.1612256
c((ml$conf.int[1] - 1 + sp_ci[1]) / (se_ci[2] - 1 + sp_ci[1]) + p1_ml_cci[1] * reversion_ci[1],
(ml$conf.int[2] - 1 + sp_ci[2]) / (se_ci[1] - 1 + sp_ci[2]) + p1_ml_cci[2] * reversion_ci[2]) # 0.08838449 0.20061912
#################
# Surrounding
#################
# 95 est and CI
sr = prop.test(128, 1422, correct = FALSE)
sr$estimate # 0.09001406
c(sr$conf.int[1], sr$conf.int[2]) # 0.07622221 0.10601507
# correct for seroreversion
p1_sr = 48/1925
p1_sr_test = prop.test(48, 1925, correct = FALSE)
p1_sr_ci = c(p1_sr_test$conf.int[1], p1_sr_test$conf.int[2])
sr$estimate + p1_sr * reversion # 0.09733445
c(sr$conf.int[1] + p1_sr_ci[1] * reversion_ci[1], sr$conf.int[2] + p1_sr_ci[2] * reversion_ci[2]) # 0.08030107 0.11868052
# correct for both seroreversion and test-kit performance
p1_sr_cci = c((p1_sr_ci[1] + sp_ci[1] - 1)/(se_ci[2] - 1 + sp_ci[1]), (p1_sr_ci[2] + sp_ci[2] - 1)/(se_ci[1] - 1 + sp_ci[2]))
(sr$estimate - 1 + sp) / (se - 1 + sp) + reversion * p1_sr # 0.1071653
c((sr$conf.int[1] - 1 + sp_ci[1]) / (se_ci[2] - 1 + sp_ci[1]) + p1_sr_cci[1] * reversion_ci[1],
(sr$conf.int[2] - 1 + sp_ci[2]) / (se_ci[1] - 1 + sp_ci[2]) + p1_sr_cci[2] * reversion_ci[2]) # 0.0372629 0.1417927
#################
# Other
#################
# 95 est and CI
ot = prop.test(372, 4304, correct = FALSE)
ot$estimate # 0.08643123
c(ot$conf.int[1], ot$conf.int[2]) # 0.07840072 0.09519932
# correct for seroreversion
p1_ot = 35/2705
p1_ot_test = prop.test(35, 2705, correct = FALSE)
p1_ot_ci = c(p1_ot_test$conf.int[1], p1_ot_test$conf.int[2])
ot$estimate + p1_ot * reversion # 0.09022983
c(ot$conf.int[1] + p1_ot_ci[1] * reversion_ci[1], ot$conf.int[2] + p1_ot_ci[2] * reversion_ci[2]) # 0.08041614 0.10210530
# correct for both seroreversion and test-kit performance
p1_ot_cci = c((p1_ot_ci[1] + sp_ci[1] - 1)/(se_ci[2] - 1 + sp_ci[1]), (p1_ot_ci[2] + sp_ci[2] - 1)/(se_ci[1] - 1 + sp_ci[2]))
(ot$estimate - 1 + sp) / (se - 1 + sp) + reversion * p1_ot # 0.09955585
c((ot$conf.int[1] - 1 + sp_ci[1]) / (se_ci[2] - 1 + sp_ci[1]) + p1_ot_cci[1] * reversion_ci[1],
(ot$conf.int[2] - 1 + sp_ci[2]) / (se_ci[1] - 1 + sp_ci[2]) + p1_ot_cci[2] * reversion_ci[2]) # 0.03739336 0.12198961
p1_ml_cci
p1_sr_cci
p1_ot_cci
